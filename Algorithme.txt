//////////
// A NE PAS OUBLIER
// 
// VICTOIRE -> Tant que ? Gérer le retour à Lecture...
// GARDER EN MEMOIRE LES CHOIX ET RESULTATS -> Tableau dans tableau ? :skull:
// 
// 
//////////


// Génération de la séquence
Variable 
	sequence, choix : chaîne de caractères
	nombre1, nombre2, nombre3, nombre4: caractère
	longueur_choix : entier

// Lecture proposition du joueur 	
Variable
	proposition : chaîne de caractères
	redemander : booléen
	compteur1, compteur2 : entier
	
Tableau tentatives[6][0] : chaîne de caractères

//Affichage du résultat
Variable
	lettres_justes : entier
	indications : chaîne de caractères
	victoire : booléen
	choixContinuer : caractère
	
//Nouvelle partie
Variable
	nombreEssais, maximumEssais : entier
	continuer, choixRecommencer : booléen
	
 	
Début
	Fonction nouvellePartie
		generationSequence
		
		continuer <- vrai
		nombreEssais <- 0
		maximumEssais <- 7
		
		//Reset des réponses en cas de restart
		Tableau tentativesVide[6][0] : chaîne de caractères
		tentatives <- tentativesVide

		
		TantQue continuer == vrai et nombreEssais < maximumEssais Faire
			lectureEtValidation
			nombreEssais++
			analyseEtAffichage
		FinTantQue
		
		Si nombreEssais == maximumEssais Alors
			écrire "Vous avez dépassé le nombre d'essais ! La bonne réponse était " + sequence
		FinSi
		
		Si choixContinuer == "N" Alors
			écrire "Vous avez abandonné ! La bonne réponse était " + sequence
		FinSi
		
		Si victoire Alors
			écrire "Bravo ! Vous avez trouvé en " + nombreEssais + " essais."
		FinSi
		
		écrire "Voulez-vous recommencer ? O/N"
		lire choixRecommencer
		
		Si choixRecommencer == "O" Alors
			retourner nouvellePartie
		FinSi
		
	FinFonction


//Génération de la séquence
	Fonction generationSequence
		choix <- "ABCDEFGH"
		longueur_choix <- nb_lettre(choix)
		
		nombre1 <- aléatoire(0, longueur_choix - 1)
		nombre2 <- 0
		TantQue nombre2 == nombre1 Faire
			nombre2 <- aléatoire(0, longueur_choix - 1)
		FinTantQue
		nombre3 <- 0
		TantQue nombre3 == nombre1 ou nombre3 == nombre2 Faire
			nombre3 <- aléatoire(0, longueur_choix - 1)
		FinTantQue
		nombre4 <- 0
		TantQue nombre4 == nombre1 ou nombre4 == nombre2 ou nombre4 == nombre3 Faire
			nombre4 <- aléatoire(0, longueur_choix - 1)
		FinTantQue
		
		sequence <- caractèreA(choix, nombre1) & caractèreA(choix, nombre2) & caractèreA(choix, nombre3) & caractèreA(choix, nombre4)
	FinFonction

//Lecture et validation de la proposition du joueur
	Fonction lectureEtValidation
	
		Tableau caracteres_proposition(4) : caractère
	
		proposition <- a
		redemander <- vrai
		compteur1 <- 0
		compteur2 <- 0
		
		TantQue redemander Faire
			écrire "Proposez quartre lettres différentes entre A et H."
			écrire "Il vous reste " + maximumEssais - nombreEssais + " tentatives."
			écrire "Quelle est votre proposition ?" 
			lire proposition
	
			//Test longueur et transformation en majucules
			Si nb_lettre(proposition) != 4 Alors
				redemander <- vrai
				écrire "Il y a plus ou moins de 4 lettres."
			FinSi
			
			Si !redemander Alors
				enMajuscule(proposition)
			FinSi
			
			//Tranfert dans le tableau
			Si !redemander Alors
				Pour compteur1 de 0 à 3
					caracteres_proposition[compteur1] <- caractèreA(proposition, compteur1)
				FinPour
			FinSi
			
			Si !redemander Alors
				Pour compteur1 de 0 à 3
				
					//Test si c'est entre A et H
					Si(caracteres_proposition[compteur1] < A ou caracteres_proposition[compteur1] > H) Alors
						redemander <- vrai
						écrire "Tous les caractères ne sont pas compris entre A et H"
					FinSi
					
					//Test de doublon
					Pour compteur2 de 0 à 3
						Si compteur1 != compteur2 Alors
							Si caracteres_proposition[compteur1] == caracteres_proposition[compteur2] Alors
								redemander <- vrai
								écrire "Certaines lettres sont en double"
							FinSi
						FinSi
					FinPour
					
				FinPour
			FinSi
		FinTantQue
	FinFonction
	
// Analyse de la proposition du joueur
	Fonction analyseEtAffichage
	
		lettres_justes <- 0
		indications <- ""
	
		//Traitement des bonnes réponses
		compteur1 <- 0
		Pour compteur1 de 0 à 3
			Si caractèreA(proposition,compteur1) == caractèreA(sequence,compteur1) Alors
				lettres_justes++
				indications <- indications + "Vert "
			FinSi
		FinPour
		
		//Traitement des bonnes réponses mal placées
		compteur1 <- 0
		compteur2 <- 0
		Pour compteur1 de 0 à 3
			Pour compteur2 de 0 à 3
				Si(compteur1 != compteur2) Alors
					Si caractèreA(proposition,compteur1) == caractèreA(sequence,compteur2) Alors
						indications <- indications + "Orange "
					FinSi
				FinSi
			FinPour
		FinPour
	
		
		//Ajout dans le tableau de tentatives
		tentatives[nombreEssais - 1] [0] <- proposition
		tentatives[nombreEssais - 1] [1] <- indications
		
		
		//Victoire
		Si lettres_justes == 4 Alors
			continuer <- faux
			victoire <- vrai
		FinSi
		
		//Affichage des résultat
		Sinon
			compteur1 <- 0
			Pour compteur1 de 0 à nombreEssais - 1 Faire 
				écrire "Essai" + nombreEssais + ": " + tentatives[nombreEssais - 1] [0] + " - " + tentatives[nombreEssais - 1] [1]
			FinPour
	
			écrire "Voulez vous continuer ? O/N"
			lire choixContinuer
			Si choixContinuer == "N" Alors
				continuer <- faux
			FinSi
		FinSi
		
	FinFonction	

	
	
	
	
